buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("pl.allegro.tech.build:axion-release-plugin:$releasePluginVersion")
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: 'pl.allegro.tech.build.axion-release'

repositories {
	mavenCentral()
	jcenter()
}

ext {
	getGitRevision = {
		File dir = project.getProjectDir()
		def command = """git rev-list HEAD --count ."""
		def text = command.execute(null, dir).in.text.trim().toInteger()
		return text
	}
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter"
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.springframework.boot:spring-boot-starter-data-jpa"
	compile "org.springframework.boot:spring-boot-starter-data-rest"
	compile "com.graphql-java:graphql-java:${graphqlVersion}"

	runtime "com.h2database:h2"

	testCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
	testCompile "org.spockframework:spock-spring:${spockSpringVersion}"
	testCompile "org.spockframework:spock-core:${spockSpringVersion}"
	testCompile "org.springframework.boot:spring-boot-starter-test"
}

clean.doLast {
	file(System.getProperty('user.home')).eachFileMatch(~/timeTracker-test.*/) {
		it.delete()
	}
}

afterEvaluate {
	def source = '1.8'
	if (plugins.findPlugin('java')) {
		sourceCompatibility = source
		targetCompatibility = source
		[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.2'
}

test {
	testLogging {
		events "passed", "skipped", "failed"
	}
}

jar {
	baseName = "tputt-backend"
	version = ""
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = false
	}
}

scmVersion {
	repository {
		type = 'git'
		directory = project.rootProject.file('./')
		remote = 'origin'
	}

	tag {
		prefix = 'tpu-tt'
		versionSeparator = '-'
	}

	hooks {
		def indexHTML = sourceSets.main.resources.find {it.name == "index.html"}

		pre 'fileUpdate', [file: indexHTML.path, pattern: {v,p -> /(version:) (.*)/}, replacement: {v, p -> "\$1 $v.${getGitRevision()}"}]
		pre 'fileUpdate', [file: indexHTML.path, pattern: {v,p -> /(build release:) (.*)/}, replacement: {v, p -> "\$1 ${new Date()}"}]
		pre 'commit'
	}
}

project.version = scmVersion.version
